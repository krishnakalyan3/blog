{
  "hash": "1b7bb70c303decad1a44f9490b74159b",
  "result": {
    "markdown": "---\ntitle: \"Visualize sample data with Histogram\"\ndate: \"2020-11-22\"\ncategories: [data-visualization, R]\nimage: \"bin.jpg\"\n---\n\n\nGenerating sample data can always help me to understand any underlying concept better. Let's explore the `sample` function. It takes the following parameters (Sample Range, Number of samples, Should the sample be with or without replacement). To know more about this function execute `?sample`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nx <- sample(x = 1:10, replace=TRUE, size  = 10); x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3  3 10  2  6  5  4  6  9 10\n```\n:::\n:::\n\nThe `set.seed` function makes sure that every time random data is generated it is the same. \n\n### Histogram\nA histogram basically groups data into bins. `bins` are also called `buckets`, `intervals`. Histogram represents the distribution of numerical data. The first step is to `bin` the data into a series of non overlapping intervals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(x, breaks=3)\n```\n\n::: {.cell-output-display}\n![](binning_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThere are many practical applications of Histograms. Some of them are\n\n1. Visualizing the underlying distribution of data for statistical analysis\n2. [DBBahn](https://www.bahn.com/en) uses give fare discounts to people based on age",
    "supporting": [
      "binning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}